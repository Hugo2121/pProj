#! /bin/bash -u
clear
date | tee log.encapsulation.txt
echo " This script captures an IPv6 datagram from host A in net17 (or net18) to host B in net18 (or net17) which is generated by tracepath6 HOST_B command" | tee -a log.encapsulation.txt
echo " An auxillary script \"ipV4.encapsulation.sh\" captures the 6to4 encapsulation of the datagram going through the IPv4 tunnel in net16 (or net19)." | tee -a log.encapsulation.txt
echo " tcpdump is used to capture and display the datagrams, which are stored in files \"encapsulation.cap\" and \"ipV4.encapsulation.cap\" and can be viewed at a later time using tcpdump command or in Wireshark." | tee -a log.encapsulation.txt
echo " A log of the script is kept in \"log.encapsulation.txt\" and can be viewed at a later date." | tee -a log.encapsulation.txt
echo " The script uses an \"INTERMEDIATE_NODE\" entered by the user to run the auxillary script." | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
#sleep 2
#echo "It copies and runs a secondary script \"capture_ICMP_IPv4_encapsulation.sh\" on an intermediate node to capture the IPv4 encapsulation of the IPv6 packets."
#echo "The second script is copied in $USER@INTERMEDIATE_NODE/home/$USER/Assignment2/ and is run there. It will in turn copy the result captured file to the orignal machine where the main script is being run"
#echo "The captured files are copied to $HOSTNAME/$PWD wich must be either /home/$USER/Assignment2/ or /assignment/2/ffakhrae/ or /assignment/2/$USER/."
#echo "Please wait for initialization"
sleep 6


#--------------------------------------------------------------------------------
#   VARIABLES
#--------------------------------------------------------------------------------

NET16=(summer fall equinox april june september)
NET17=(august autumn spring november)
NET18=(may july winter)
NET19=(october solstice year)

TARGET_IPV6_ADDRESS=2002:ac13:103:218:250:56ff:fea4:6bcd    #user will be prompted to update this 

for i in ${NET17[*]}; do
    if [[ $i =~ $HOSTNAME ]]; then
        SUBNET=net17
        TARGET_SUBNET=net18
        INTERMEDIATE_SUBNET=net16
        TARGET_LIST=(may july winter)
        INTERMEDIATE_LIST=(april june september summer fall equinox)
    fi
done

for i in ${NET18[*]}; do
    if [[ $i =~ $HOSTNAME ]]; then
        SUBNET=net18
        TARGET_SUBNET=net17
        INTERMEDIATE_SUBNET=net19
        TARGET_LIST=(august november autumn spring)
        INTERMEDIATE_LIST=(october solstice year)
    fi
done

IP1=fdd0:8184:d967:218:250:56ff:fea4:6bcd   #local host. useless
IP2=2002:ac13:103:218:250:56ff:fea4:6bcd   #march 172.19.1.3     -> use this............
IP3=fdd0:8184:d967:118:250:56ff:fea4:6bcd   #useless
IP4=2002:ac10:10c:118:250:56ff:fea4:6bcd    #december 172.16.1.12
IP5=fe80::250:56ff:fea4:6bcd    #eth1 link   useless
IP6=fe80::250:56ff:fea4:3a91  #eth0 link  uselss                         these are all for july.net18

#--------------------------------------------------------------------------------
#   FUNCTIONS
#--------------------------------------------------------------------------------


# reset_interface():
# Postcondition: routing table is reset to its original state. eth1 is up and configured correctly                
reset_interface()
{
    sudo ifconfig eth1 down &> /dev/null  && sudo ifdown eth1 &> /dev/null       # > /dev/null 2>&1 for only STDERR piping 
    sleep 1
    sudo ifconfig eth1 up &> /dev/null && sudo ifup eth1 &> /dev/null
}

# reset_target_interface():
# Precondition: target host is a valid host, and is reachable via admin network
# Postcondition: target host's routing table is reset to its original state and eth1 NIC is up
reset_target_interface()
{
    ssh -tt $USER@$TARGET_HOST 'sudo ifconfig eth1 down && sudo ifdown eth1 > /dev/null 2>&1; sleep 1.5; sudo ifconfig eth1 up && sudo ifup eth1 > /dev/null 2>&1'
}

# reset_intermediate_interface():
# Precondition: intermediate host is a valid host, and is reachable via admin network
# Postcondition: intermediate host's routing table is reset to its original state and eth1 NIC is up
reset_intermediate_interface()
{
    ssh -tt $USER@$INTERMEDIATE_NODE 'sudo ifconfig eth1 down && sudo ifdown eth1 > /dev/null 2>&1; sleep 1.5; sudo ifconfig eth1 up && sudo ifup eth1 > /dev/null 2>&1'
}

# print_target_list()
# Postcondition: a list of valid targets is displayed to the user
print_target_list()
{
    for i in ${TARGET_LIST[*]}; do
        echo $i
    done
    echo "->"; echo
}

# print_intermediate_list():
# Postcondition: a list of valid targets is displayed to the user
print_intermediate_list()
{
    for i in ${INTERMEDIATE_LIST[*]}; do
        echo $i
    done
    echo "->"; echo
}

# get_target_info()
# Postcondition: target host's IP (admin network) and the subnetwork that it belongs to are stored in $TARGET_SUBNET_IP, $TARGET_ADMIN_IP and $TARGET_SUBNET
get_target_info()
{ 
    TARGET_SUBNET_IP=$(nmblookup -A $TARGET_HOST.$TARGET_SUBNET | awk '{print $5;}')
    TARGET_ADMIN_IP=$(nmblookup -A $TARGET_HOST | awk '{print $5;}')
}

# get_intermediate_info():
# Postcondition: intermediate node's IP (admin network) and the subnetwork that it belongs to are stored in $INTERMEDIATE_SUBNET_IP, $INTERMEDIATE_ADMIN_IP
get_intermediate_info()
{ 
    INTERMEDIATE_SUBNET_IP=$(nmblookup -A $INTERMEDIATE_NODE.$INTERMEDIATE_SUBNET | awk '{print $5;}')
    INTERMEDIATE_ADMIN_IP=$(nmblookup -A $INTERMEDIATE_NODE | awk '{print $5;}')
}

# get_host_info():
# Postcondition: current host's admin IP, sub network, and subnetwork IP are stored in $HOST_ADMIN_IP, $HOST_SUBNET_IP
get_host_info()
{
    HOST_SUBNET_IP=$(nmblookup -A $HOSTNAME.$SUBNET | awk '{print $5;}')
    HOST_ADMIN_IP=$(nmblookup -A $HOSTNAME | awk '{print $5;}')
}

# remote_copy_script(): #depricated
# Postcondition: capture_ICMP_IPv4_encapsulation.sh is copied on intermediate node read above
remote_copy_script()
{
    scp $PWD/ipV4Encapsulation.sh $USER@$INTERMEDIATE_NODE:/home/$USER/
}

# run_remote_script():   #depricated
# Postcondition: ipV4Encapsulation.sh is running on INTERMEDIATE NODE
run_remote_script()
{
# if this doesn't work as intented please run the script on the $INTERMEDIATE_NODE manually so it can capture the packets.
    ssh -tt $USER@$INTERMEDIATE_NODE '$PWD/capture_ICMP_IPv4_encapsulation.sh'    # sudo -b for background but may screw up the sudo commands that require password
}

# remote_tcpdump():
# Postcondition: tcpdump is running on the INTERMEDIATE_NODE. The 6to4 IPv4 encapsulation is sotred in ipV4.encapsulation.cap
remote_tcpdump()
{
    echo | tee -a log.encapsulation.txt
    echo " Creating a new \"screen\" process on $INTERMEDIATE_NODE." | tee -a log.encapsulation.txt 
    sleep 2
    echo | tee -a log.encapsulation.txt
    ssh -tt $USER@$INTERMEDIATE_NODE screen -d -m -S capture "sudo tcpdump -i eth1 -c 3 -s0 -e -w ipV4.encapsulation.cap ip[9] == 41"
    echo " Trying to reconnect to $INTERMEDIATE_NODE \"screen\" in order to enter the sudo password for tcpdump. If this fails, you must run it manually by copying encapsulation.manual.sh script to the intermediate node and running it manually." | tee -a log.encapsulation.txt
    sleep 3
    clear
    echo "*****IMPORTANT NOTE***** Please press \"Ctrl+a\" followed by \"d\" to detach from the \"NEXT\" screen or the process will be terminated..... Thank you!" | tee -a log.encapsulation.txt
    echo | tee -a log.encapsulation.txt
    sleep 10
    ssh -tt $USER@$INTERMEDIATE_NODE screen -r capture 
}

# remote_copy_cap_file():
# Precondition: the ipV4.encapsulation.cap file must exist on the INTERMEDIATE_NODE and a connection to that machine must be possible via admin network
# Postcondition: the ipV4.encapsulation.cap file containing the 6to4 encapsulated IPv4 datagram is copied from the INTERMEDIATE_NODE to $HOSTNAME
remote_copy_cap_file()
{
    scp $USER@$INTERMEDIATE_NODE:/home/$USER/ipV4.encapsulation.cap $PWD
}

# print_target_ifconfig():
# Postcondition: ifconfig information of the $TARGET_HOST are displayed 
print_target_ifconfig()
{
    ssh -tt $USER@$TARGET_HOST 'ifconfig'
}

### list of functions:
# reste_interface()
# reset_target_interface()
# reset_intermediate_interface()
# print_target_list()
# print_intermediate_list()  
# get_target_info()
# get_host_info()
# get_intermediate_info()
# remote_copy_script()
# run_remote_script()
# remote_tcpdump()
# remote_copy_cap_file()
# print_target_ifconfig()

#--------------------------------------------------------------------------------
#   MAIN BODY
#--------------------------------------------------------------------------------

clear
echo " Please select a target node from the follwoing list: " | tee -a log.encapsulation.txt
print_target_list | tee -a log.encapsulation.txt
read TARGET_HOST
echo | tee -a log.encapsulation.txt

clear
echo " Please select an intermediate node from the following list: " | tee -a log.encapsulation.txt
print_intermediate_list | tee -a log.encapsulation.txt
read INTERMEDIATE_NODE
echo | tee -a log.encapsulation.txt

clear
echo " Initialization in progress. Please stand by...." | tee -a log.encapsulation.txt
echo " This may take a few moments.... "
reset_interface
reset_target_interface
reset_intermediate_interface

get_host_info
get_target_info
get_intermediate_info
echo | tee -a log.encapsulation.txt
echo " Initialization complete. " | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 1

clear
echo " You are running \"encapsulation.sh\" on \"$HOSTNAME\" with \"admin\" IP address: \"$HOST_ADMIN_IP\" on subnet \"$SUBNET\" with subnet IP address: \"$HOST_SUBNET_IP\"" | tee -a log.encapsulation.txt
echo " You chose the target \"$TARGET_HOST\" with \"admin\" IP address: \"$TARGET_ADMIN_IP\" on subnet \"$TARGET_SUBNET\" with subnet IP address: \"$TARGET_SUBNET_IP\"" | tee -a log.encapsulation.txt
echo " You chose the intermediate node \"$INTERMEDIATE_NODE\" with \"admin\" IP address: \"$INTERMEDIATE_ADMIN_IP\" on subnet \"$INTERMEDIATE_SUBNET\" with subnet IP address: \"$INTERMEDIATE_SUBNET_IP\"" | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 4

clear
echo " Running tcpdump on \"$INTERMEDIATE_NODE\"..... " | tee -a log.encapsulation.txt
remote_tcpdump
echo " Process complete. " | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 2

clear
print_target_ifconfig | tee -a log.encapsulation.txt
echo " Please enter \"$TARGET_HOST\" IPv6 address. You can copy-paste from the above information here: " | tee -a log.encapsulation.txt
read TARGET_IPV6_ADDRESS
echo | tee -a log.encapsulation.txt
read -p "Please ensure that the tcpdump is running on the intermediate node before proceding (if using the manual mode) then press enter to continue." | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt

echo " Running tcpdump locally.... " | tee -a log.encapsulation.txt
sudo tcpdump -i any -c 5 -s0 -w encapsulation.cap ip6 &
echo " Process complete. " | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 2

#ssh -t $INTERMEDIATE_NODE 'touch screen.accessed.txt; screen -S captureIPv4 -d -m ./capture_ICMP_IPv4_encapsulation.sh'
clear
echo " Testing tracepath6 reachability of \"$TARGET_HOST\" with IPv6 address:\"$TARGET_IPV6_ADDRESS\"" | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
tracepath6 $TARGET_IPV6_ADDRESS  | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 3

#tracepath6 -l 65535 $HOST_B_IPv6  | sudo tcpdump -i any -c 5 -v -w encapsulation.cap -s 65535 ip6 #'((icmp[icmptype] == icmp-echoreply) or (icmp[icmptype] == icmp-echoreply))' 
#ping6 -I eth1 -c15 -W1 $HOST_B_IPv6 | sudo tcpdump -i any -c 10 -v -w encapsulation.cap -s 65535 #'proto 41'    #'icmp[icmptype] == icmp-echoreply' # or (icmp[icmptype] == icmp-echoreply))' host $HOST_B_IPv6 

clear
echo " IPv6 datagram captured message: " | tee -a log.encapsulation.txt
sudo tcpdump -vvvXX -r encapsulation.cap | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 2

echo " Copying the 6to4 IPv4 encapsulated message from \"$INTERMEDIATE_NODE/HOME/$USER/\" " | tee -a log.encapsulation.txt
remote_copy_cap_file
echo " Process complete. " | tee -a log.encapsulation.txt
echo | tee -a log.encapsulation.txt
sleep 2

clear
echo " 6to4 IPv4 encapsulated datagram captured message: " | tee -a log.encapsulation.txt
sudo tcpdump -vvvXX -r ipV4.encapsulation.cap | tee -a log.encapsulation.txt


echo;
echo "Have a beautiful time!"
echo "Farzin Fakhraei"
echo; echo;
